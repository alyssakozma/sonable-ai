# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import AIMessages_pb2 as AIMessages__pb2
import PodcastMessages_pb2 as PodcastMessages__pb2


class AIServiceStub(object):
    """
    AI service handles generative text and audio, assembling them into a
    stream to be read by the service consumer.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.generatePodcast = channel.unary_stream(
                '/generated.AIService/generatePodcast',
                request_serializer=AIMessages__pb2.GenerateEpisodeRequest.SerializeToString,
                response_deserializer=PodcastMessages__pb2.ByteData.FromString,
                _registered_method=True)


class AIServiceServicer(object):
    """
    AI service handles generative text and audio, assembling them into a
    stream to be read by the service consumer.
    """

    def generatePodcast(self, request, context):
        """
        Request to generate an episode. Returns raw audio data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'generatePodcast': grpc.unary_stream_rpc_method_handler(
                    servicer.generatePodcast,
                    request_deserializer=AIMessages__pb2.GenerateEpisodeRequest.FromString,
                    response_serializer=PodcastMessages__pb2.ByteData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'generated.AIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('generated.AIService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIService(object):
    """
    AI service handles generative text and audio, assembling them into a
    stream to be read by the service consumer.
    """

    @staticmethod
    def generatePodcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/generated.AIService/generatePodcast',
            AIMessages__pb2.GenerateEpisodeRequest.SerializeToString,
            PodcastMessages__pb2.ByteData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
