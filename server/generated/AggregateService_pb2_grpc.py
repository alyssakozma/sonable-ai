# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import AggregateMessages_pb2 as AggregateMessages__pb2


class AggregateServiceStub(object):
    """*
    Aggregate service handles ingestion and pre-processing of
    article, video, and audio sources into AI-ready text. We also
    store information about different sources and articles, and
    apply weights to them here to curate our news.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestAggregate = channel.unary_stream(
                '/generated.AggregateService/requestAggregate',
                request_serializer=AggregateMessages__pb2.AggregateRequest.SerializeToString,
                response_deserializer=AggregateMessages__pb2.ArticleData.FromString,
                _registered_method=True)


class AggregateServiceServicer(object):
    """*
    Aggregate service handles ingestion and pre-processing of
    article, video, and audio sources into AI-ready text. We also
    store information about different sources and articles, and
    apply weights to them here to curate our news.
    """

    def requestAggregate(self, request, context):
        """
        Request for an aggregate of processed ArticleData.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'requestAggregate': grpc.unary_stream_rpc_method_handler(
                    servicer.requestAggregate,
                    request_deserializer=AggregateMessages__pb2.AggregateRequest.FromString,
                    response_serializer=AggregateMessages__pb2.ArticleData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'generated.AggregateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('generated.AggregateService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AggregateService(object):
    """*
    Aggregate service handles ingestion and pre-processing of
    article, video, and audio sources into AI-ready text. We also
    store information about different sources and articles, and
    apply weights to them here to curate our news.
    """

    @staticmethod
    def requestAggregate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/generated.AggregateService/requestAggregate',
            AggregateMessages__pb2.AggregateRequest.SerializeToString,
            AggregateMessages__pb2.ArticleData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
