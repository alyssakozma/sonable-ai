// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: AggregateService.proto

package sonable

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggregateService_RequestAggregate_FullMethodName = "/AggregateService/requestAggregate"
)

// AggregateServiceClient is the client API for AggregateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Aggregate service handles ingestion and pre-processing of
// article, video, and audio sources into AI-ready text. We also
// store information about different sources and articles, and
// apply weights to them here to curate our news.
type AggregateServiceClient interface {
	//
	//Request for an aggregate of processed ArticleData.
	RequestAggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArticleData], error)
}

type aggregateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregateServiceClient(cc grpc.ClientConnInterface) AggregateServiceClient {
	return &aggregateServiceClient{cc}
}

func (c *aggregateServiceClient) RequestAggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArticleData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AggregateService_ServiceDesc.Streams[0], AggregateService_RequestAggregate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AggregateRequest, ArticleData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AggregateService_RequestAggregateClient = grpc.ServerStreamingClient[ArticleData]

// AggregateServiceServer is the server API for AggregateService service.
// All implementations must embed UnimplementedAggregateServiceServer
// for forward compatibility.
//
// *
// Aggregate service handles ingestion and pre-processing of
// article, video, and audio sources into AI-ready text. We also
// store information about different sources and articles, and
// apply weights to them here to curate our news.
type AggregateServiceServer interface {
	//
	//Request for an aggregate of processed ArticleData.
	RequestAggregate(*AggregateRequest, grpc.ServerStreamingServer[ArticleData]) error
	mustEmbedUnimplementedAggregateServiceServer()
}

// UnimplementedAggregateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregateServiceServer struct{}

func (UnimplementedAggregateServiceServer) RequestAggregate(*AggregateRequest, grpc.ServerStreamingServer[ArticleData]) error {
	return status.Errorf(codes.Unimplemented, "method RequestAggregate not implemented")
}
func (UnimplementedAggregateServiceServer) mustEmbedUnimplementedAggregateServiceServer() {}
func (UnimplementedAggregateServiceServer) testEmbeddedByValue()                          {}

// UnsafeAggregateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregateServiceServer will
// result in compilation errors.
type UnsafeAggregateServiceServer interface {
	mustEmbedUnimplementedAggregateServiceServer()
}

func RegisterAggregateServiceServer(s grpc.ServiceRegistrar, srv AggregateServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregateService_ServiceDesc, srv)
}

func _AggregateService_RequestAggregate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggregateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AggregateServiceServer).RequestAggregate(m, &grpc.GenericServerStream[AggregateRequest, ArticleData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AggregateService_RequestAggregateServer = grpc.ServerStreamingServer[ArticleData]

// AggregateService_ServiceDesc is the grpc.ServiceDesc for AggregateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AggregateService",
	HandlerType: (*AggregateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "requestAggregate",
			Handler:       _AggregateService_RequestAggregate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "AggregateService.proto",
}
